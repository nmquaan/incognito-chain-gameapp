export default class BlockHelper {
    static getTotal() {
      return 43;
    }
    
    static getData(type) {
      var listType = [];
      // Type 0
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 1
      listType.push([
        [ 1, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 2
      listType.push([
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 3
      listType.push([
        [ 1, 1, 1, 1, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 4
      listType.push([
        [ 1, 1, 1, 1, 1],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 5
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 6
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 7
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 8
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0]
      ]);
  
      // Type 9
      listType.push([
        [ 1, 1, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 10
      listType.push([
        [ 1, 1, 0, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 11
      listType.push([
        [ 0, 1, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 12
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 13
      listType.push([
        [ 1, 1, 1, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 14
      listType.push([
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 1, 0, 0],
        [ 0, 0, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 15
      listType.push([
        [ 0, 0, 1, 0, 0],
        [ 0, 0, 1, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 16
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 17
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
  
      // Type 18
      listType.push([
        [ 1, 1, 1, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 19
      listType.push([
        [ 1, 1, 0, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
      
      // Type 20
      listType.push([
        [ 0, 0, 1, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 21
      listType.push([
        [ 0, 1, 0, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 22
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 23
      listType.push([
        [ 1, 1, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 24
      listType.push([
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 25
      listType.push([
        [ 0, 1, 0, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 26
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 27
      listType.push([
        [ 0, 0, 0, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 28
      listType.push([
        [ 0, 1, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);
      
      // Type 29
      listType.push([
        [ 1, 1, 0, 0, 0],
        [ 0, 1, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 30
      listType.push([
        [ 0, 1, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 31
      listType.push([
        [ 0, 1, 1, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 32
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 33
      listType.push([
        [ 1, 1, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 34
      listType.push([
        [ 0, 1, 0, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 35
      listType.push([
        [ 1, 1, 1, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 36
      listType.push([
        [ 0, 0, 1, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 37
      listType.push([
        [ 0, 1, 0, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 38
      listType.push([
        [ 1, 0, 0, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 39
      listType.push([
        [ 1, 1, 1, 0, 0],
        [ 1, 0, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 40
      listType.push([
        [ 1, 1, 0, 0, 0],
        [ 0, 1, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 41
      listType.push([
        [ 1, 0, 1, 0, 0],
        [ 1, 1, 1, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      // Type 42
      listType.push([
        [ 1, 1, 0, 0, 0],
        [ 1, 0, 0, 0, 0],
        [ 1, 1, 0, 0, 0],
        [ 0, 0, 0, 0, 0],
        [ 0, 0, 0, 0, 0]
      ]);

      return listType[type];
    }

    static getFrameByIndex(type)
    {
      switch(type)
      {
        case 1:
          return 'block_blue.png';

        case 2:
          return 'block_green.png';
        
        case 3:
          return 'block_grey.png';

        case 4:
          return 'block_orange.png';
          
        case 5:
          return 'block_red.png';

        default:
          return 'block_violet.png';
      }
    }

    static getRandomSymbol(typeFrame)
    {
      var type = Phaser.Math.Between(1, 6).toString();
      var outPut = type.padStart(typeFrame, '0') + '.png';
      console.log('Frame Type = ', outPut);
      return outPut;
    }
}
  